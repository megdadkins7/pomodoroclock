{"ast":null,"code":"import _slicedToArray from \"/Users/spectrumlighting/Documents/Sites/pomodoro-clock/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/spectrumlighting/Documents/Sites/pomodoro-clock/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/spectrumlighting/Documents/Sites/pomodoro-clock/src/components/TimeApp.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  header {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n  }\\n  header h1 {\\n    text-transform: uppercase;\\n    font-weight: 400;\\n    letter-spacing: 5px;\\n    color: #111D4A;\\n  }\\n  main {\\n    display: flex;\\n    flex-grow: 1;\\n    flex-direction: column;\\n    justify-content: center;\\n    align-items: center;\\n    width: 75vh;\\n  }\\n  .TimeWrapper {\\n    background-color: #F3F3F4;\\n    width: 100%;\\n    padding: 1rem;\\n    box-shadow: 0 3px 6px #888888;\\n  }\\n  .TimeWrapper h2 {\\n    text-align: left;\\n    font-size: 2rem;\\n    text-transform: uppercase;\\n    color: #7067CF;\\n  }\\n  .TimeWrapper h3 {\\n    text-align: center;\\n    font-size: 7rem;\\n    color: #111D4A;\\n    font-weight: 400;\\n  }\\n  .SetTimeWrapper {\\n    margin: 1rem;\\n    width: 100%;\\n    display: flex;\\n    justify-content: space-between;\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useInterval } from '../hooks/useInterval';\nimport SetTime from './SetTime';\nimport Timer from './Timer';\nimport Controls from './Controls';\nimport alarm from '../sounds/alarm.mp3';\nconst StyledTimeApp = styled.div(_templateObject());\n\nfunction TimeApp() {\n  const _useState = useState(5),\n        _useState2 = _slicedToArray(_useState, 2),\n        breakVal = _useState2[0],\n        setBreakVal = _useState2[1];\n\n  const _useState3 = useState(25),\n        _useState4 = _slicedToArray(_useState3, 2),\n        sessionVal = _useState4[0],\n        setSessionVal = _useState4[1];\n\n  const _useState5 = useState('session'),\n        _useState6 = _slicedToArray(_useState5, 2),\n        mode = _useState6[0],\n        setMode = _useState6[1];\n\n  const _useState7 = useState(sessionVal * 60 * 1000),\n        _useState8 = _slicedToArray(_useState7, 2),\n        time = _useState8[0],\n        setTime = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        active = _useState10[0],\n        setActive = _useState10[1];\n\n  const beep = useRef();\n  useInterval(() => setTime(time - 1000), active ? 1000 : null);\n  useEffect(() => {\n    setTime(sessionVal * 60 * 1000);\n  }, [sessionVal]);\n  useEffect(() => {\n    if (time === 0 && mode === 'session') {\n      beep.current.play();\n      setMode('break');\n      setTime(breakVal * 60 * 1000);\n    } else if (time === 0 && mode === 'break') {\n      beep.current.play();\n      setMode('session');\n      setTime(sessionVal * 60 * 1000);\n    }\n  }, [time, breakVal, sessionVal, mode]);\n\n  const handleReset = () => {\n    beep.current.pause();\n    beep.current.currentTime = 0;\n    setActive(false);\n    setMode('session');\n    setBreakVal(5);\n    setSessionVal(25);\n    setTime(25 * 60 * 1000);\n  };\n\n  return React.createElement(StyledTimeApp, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Pomodoro Clock\")), React.createElement(\"main\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"TimeWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Timer, {\n    currentMode: [mode, setMode],\n    currentTime: [time, setTime],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(Controls, {\n    activeStatus: [active, setActive],\n    handleReset: handleReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"SetTimeWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(SetTime, {\n    type: 'Break',\n    value: [breakVal, setBreakVal],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(SetTime, {\n    type: 'Session',\n    value: [sessionVal, setSessionVal],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }))), React.createElement(\"audio\", {\n    id: \"beep\",\n    src: alarm,\n    ref: beep,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }));\n}\n\nexport default TimeApp;","map":{"version":3,"sources":["/Users/spectrumlighting/Documents/Sites/pomodoro-clock/src/components/TimeApp.js"],"names":["React","useState","useEffect","useRef","styled","useInterval","SetTime","Timer","Controls","alarm","StyledTimeApp","div","TimeApp","breakVal","setBreakVal","sessionVal","setSessionVal","mode","setMode","time","setTime","active","setActive","beep","current","play","handleReset","pause","currentTime"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef} from 'react'\nimport styled from 'styled-components'\n\nimport { useInterval } from '../hooks/useInterval'\n\nimport SetTime from './SetTime'\nimport Timer from './Timer'\nimport Controls from './Controls'\n\nimport alarm from '../sounds/alarm.mp3'\n\nconst StyledTimeApp = styled.div`\n  header {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  header h1 {\n    text-transform: uppercase;\n    font-weight: 400;\n    letter-spacing: 5px;\n    color: #111D4A;\n  }\n  main {\n    display: flex;\n    flex-grow: 1;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 75vh;\n  }\n  .TimeWrapper {\n    background-color: #F3F3F4;\n    width: 100%;\n    padding: 1rem;\n    box-shadow: 0 3px 6px #888888;\n  }\n  .TimeWrapper h2 {\n    text-align: left;\n    font-size: 2rem;\n    text-transform: uppercase;\n    color: #7067CF;\n  }\n  .TimeWrapper h3 {\n    text-align: center;\n    font-size: 7rem;\n    color: #111D4A;\n    font-weight: 400;\n  }\n  .SetTimeWrapper {\n    margin: 1rem;\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nfunction TimeApp() {\n  const [breakVal, setBreakVal] = useState(5)\n  const [sessionVal, setSessionVal] = useState(25)\n  const [mode, setMode] = useState('session')\n  const [time, setTime] = useState(sessionVal * 60 * 1000)\n  const [active, setActive] = useState(false)\n  const beep = useRef()\n  \n  useInterval(() => setTime(time - 1000), active ? 1000 : null)\n  \n  useEffect(() => {\n    setTime(sessionVal * 60 * 1000)\n  }, [sessionVal])\n  \n  useEffect(() => {\n    if (time === 0 && mode === 'session') {\n      beep.current.play()\n      setMode('break')\n      setTime(breakVal * 60 * 1000)\n    } else if (time === 0 && mode === 'break') {\n      beep.current.play()\n      setMode('session')\n      setTime(sessionVal * 60 * 1000)\n    }\n  }, [time, breakVal, sessionVal, mode])\n  \n  const handleReset = () => {\n    beep.current.pause()\n    beep.current.currentTime = 0\n    setActive(false)\n    setMode('session')\n    setBreakVal(5)\n    setSessionVal(25)\n    setTime(25 * 60 * 1000)\n  }\n  return (\n    <StyledTimeApp>\n      <header>\n        <h1>Pomodoro Clock</h1>\n      </header>\n      <main>\n        <div className='TimeWrapper'>\n          <Timer currentMode={[mode, setMode]} currentTime={[time, setTime]} />\n          <Controls\n            activeStatus={[active, setActive]}\n            handleReset={handleReset}\n          />\n        </div>\n        <div className='SetTimeWrapper'>\n          <SetTime type={'Break'} value={[breakVal, setBreakVal]} />\n          <SetTime type={'Session'} value={[sessionVal, setSessionVal]} />\n        </div>\n      </main>\n      <audio id='beep' src={alarm} ref={beep} />\n    </StyledTimeApp>\n  )\n}\n\nexport default TimeApp"]},"metadata":{},"sourceType":"module"}